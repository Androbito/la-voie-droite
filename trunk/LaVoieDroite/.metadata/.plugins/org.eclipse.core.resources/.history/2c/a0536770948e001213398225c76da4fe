package com.gnb.tranceme;

import java.io.IOException;

import android.content.Context;
import android.content.IntentFilter;
import android.net.ConnectivityManager;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.animation.Animation.AnimationListener;
import android.view.animation.AnimationUtils;
import android.view.animation.LayoutAnimationController;
import android.widget.BaseAdapter;
import android.widget.FrameLayout;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.Toast;

import com.digitalaria.gama.carousel.Carousel;
import com.gnb.connexions.Networking;
import com.gnb.media.StreamingMediaPlayer;
import com.gnb.menuslider.GlobalActivity;
import com.gnb.receivers.ConnectionChangeReceiver;
import com.google.gwt.animation.client.Animation;

public class MainActivity extends GlobalActivity {

	public android.view.animation.Animation upAnimation;
	public android.view.animation.Animation downAnimation;
	public LinearLayout networkNotification;
	public FrameLayout networkcanvas;
	ConnectionChangeReceiver receiver;

	private Carousel carousel;
	private static int indicator = 3;
	private ImageAdapter adapter;
	private int[] musicCover = { R.drawable.cover1, R.drawable.cover2,
			R.drawable.cover0, R.drawable.cover4, R.drawable.cover5 };

	private ImageButton streamButton;
	private ImageButton playButton;
	private boolean isPlaying;
	private boolean encours = false;
	private StreamingMediaPlayer audioStreamer;

	@Override
	public void onCreate(Bundle savedInstanceState) {

		idApp = R.layout.activity_main;
		currentActivity = this;
		super.onCreate(savedInstanceState);



		// hide block notification network
		networkNotification = (LinearLayout) findViewById(R.id.network_layout);
		networkcanvas = (FrameLayout) networkNotification
				.findViewById(R.id.network_notification);
		networkNotification.setVisibility(View.INVISIBLE);

		// register receiver connection
		receiver = new ConnectionChangeReceiver(MainActivity.this);
		registerReceiver(receiver, new IntentFilter(
				ConnectivityManager.CONNECTIVITY_ACTION));
		


		if (Networking.isNetworkAvailable(getApplicationContext())) {
			System.out.println("cc network!");
			init();

		}
	}

	private void init() {
		// create the carousel object.
		carousel = (Carousel) findViewById(R.id.carousel);

		// configurations for the carousel.
		carousel.setType(Carousel.TYPE_COVERFLOW);
		carousel.setOverScrollBounceEnabled(true);
		carousel.setInfiniteScrollEnabled(false);
		carousel.setItemRearrangeEnabled(true);

		// set images for the carousel.
		adapter = new ImageAdapter(this);
		carousel.setAdapter(adapter);

		// change the first selected position.
		carousel.setCenterPosition(indicator);
		// carousel.setOnItemSelectionUpdatedListener(this);
		initControls();
	}

	public class ImageAdapter extends BaseAdapter {
		private Context mContext;

		public ImageAdapter(Context c) {
			mContext = c;
		}

		@Override
		public int getCount() {
			return musicCover.length;
		}

		@Override
		public Object getItem(int position) {
			return null;
		}

		@Override
		public long getItemId(int position) {
			return musicCover[position];
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			View view = convertView;
			if (view == null) {
				view = LayoutInflater.from(mContext).inflate(
						R.layout.carousel_item, parent, false);
				view.setLayoutParams(new Carousel.LayoutParams(250, 250));

				ViewHolder holder = new ViewHolder();
				holder.imageView = (ImageView) view
						.findViewById(R.id.itemImage);

				view.setTag(holder);
			}

			ViewHolder holder = (ViewHolder) view.getTag();
			holder.imageView.setImageResource(musicCover[position]);

			return view;
		}

		private class ViewHolder {
			ImageView imageView;
		}
	}

	public void change(View v) {
		switch (v.getId()) {
		case R.id.imageButton5:
			indicator--;
			break;
		case R.id.imageButton4:
			indicator++;
		default:
			break;
		}
		carousel.setCenterPosition(indicator);
	}

	private void initControls() {
		streamButton = (ImageButton) findViewById(R.id.imageButton1);
		streamButton.setOnClickListener(new View.OnClickListener() {
			public void onClick(View view) {
				if (!encours)
					startStreamingAudio();
				else {
					if (!isPlaying
							&& !audioStreamer.getMediaPlayer().isPlaying()) {

						audioStreamer.getMediaPlayer().start();
						audioStreamer.startPlayProgressUpdater();
					}
					Toast t=new Toast(currentActivity);
					t.setText("error !!!");
					t.show();
					isPlaying = !isPlaying;
				}
			}
		});

		playButton = (ImageButton) findViewById(R.id.imageButton2);
		playButton.setEnabled(false);
		playButton.setOnClickListener(new View.OnClickListener() {
			public void onClick(View view) {
				if (audioStreamer.getMediaPlayer().isPlaying()) {
					audioStreamer.getMediaPlayer().pause();
				}
				isPlaying = !isPlaying;
			}
		});
	}

	private void startStreamingAudio() {
		try {
			final ProgressBar progressBar = (ProgressBar) findViewById(R.id.progressBar1);
			if (audioStreamer != null) {
				audioStreamer.interrupt();
			}
			audioStreamer = new StreamingMediaPlayer(this, null, playButton,
					streamButton, progressBar);
			audioStreamer
			.startStreaming(
					"http://a.tumblr.com/tumblr_lvqijtNrYm1r2apjao1.mp3",
					200000, 8000);
			streamButton.setEnabled(false);
			encours = true;
		} catch (IOException e) {
			Log.e(getClass().getName(), "Error starting to stream audio.", e);
		}

	}



	public void connectionListener(Object object) {

		if (object instanceof ConnectionChangeReceiver) {

			showConnectionLost();
		}

	}

	@Override
	public void onBackPressed() {

		overridePendingTransition(0, 0);
		super.onBackPressed();
	}

	@Override
	protected void onResume() {

		super.onResume();
		registerReceiver(receiver, new IntentFilter(
				ConnectivityManager.CONNECTIVITY_ACTION));

	}

	@Override
	protected void onPause() {

		super.onPause();

		//unregisterReceiver(receiver);
	}

	@Override
	protected void onDestroy() {
		// unregisterReceiver(receiver);
		super.onDestroy();

	}


	private void showConnectionLost() {

		final AnimationListener makeAppears = new AnimationListener() {

			@Override
			public void onAnimationEnd(android.view.animation.Animation arg0) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void onAnimationRepeat(android.view.animation.Animation arg0) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void onAnimationStart(android.view.animation.Animation arg0) {
				// TODO Auto-generated method stub
				
			}
		};

		final AnimationListener makeDisappears = new AnimationListener() {

			@Override
			public void onAnimationEnd(android.view.animation.Animation arg0) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void onAnimationRepeat(android.view.animation.Animation arg0) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void onAnimationStart(android.view.animation.Animation arg0) {
				// TODO Auto-generated method stub
				
			}
		};

		upAnimation = AnimationUtils.loadAnimation(this, R.anim.slide_top_up);
		downAnimation = AnimationUtils.loadAnimation(this,
				R.anim.slide_top_down);

		upAnimation.setAnimationListener(makeDisappears);
		downAnimation.setAnimationListener(makeAppears);

		if (!Networking.isNetworkAvailable(getApplicationContext())) {

			networkNotification.setVisibility(View.VISIBLE);
			networkNotification
			.setLayoutAnimation(new LayoutAnimationController(
					downAnimation));
			networkNotification.startLayoutAnimation();

		}

	}
}
